{"version":3,"sources":["../node_modules/tableschema/lib/profiles sync /^/.//.*/.json$","assets/images/computing-cloud.svg","components/Metadata/index.jsx","components/TableSchema/index.jsx","components/ProgressBar/index.jsx","utils/index.js","components/InputFile/index.jsx","components/InputUrl/index.jsx","components/Choose/index.jsx","components/Upload/index.jsx","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","customFields","label","name","input_type","values","options","Metadata","metadata","handleChange","className","path","htmlFor","type","value","title","onChange","description","encoding","required","disabled","encodeData","item","key","format","toLowerCase","formatData","option","index","TableSchema","props","useState","schema","setSchema","data","React","useMemo","columnsSchema","fields","Header","accessor","columns","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","event","newSchema","target","useEffect","renderEditSchemaField","types","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","ProgressBar","offset","setOffset","circleRef","useRef","size","progress","strokeWidth","circleOneStroke","circleTwoStroke","timeRemaining","center","radius","circumference","Math","PI","current","style","width","height","stroke","cx","cy","r","ref","strokeDasharray","strokeDashoffset","x","y","floor","getFileExtension","filename","exec","undefined","onFormatBytes","bytes","decimals","k","dm","sizes","i","log","parseFloat","pow","toFixed","detectUrlFormat","url","urlObj","URL","pathname","extension","includes","search","hash","error","isTabularDataFormat","getFileFormat","generateFileHash","file","a","arrayBuffer","crypto","subtle","digest","hashBuffer","hashArray","Array","from","Uint8Array","hashHex","b","toString","padStart","join","console","warn","InputFile","onChangeHandler","src","alt","InputUrl","onChangeUrl","onBlur","onKeyDown","keyCode","blur","handleKeyPress","placeholder","Choose","resetUploadState","uploadOption","setUploadOption","onClick","FileWithHash","originalFile","lastModified","_originalFile","algorithm","this","File","Upload","setState","selectedFile","selectedUrl","fileSize","formattedSize","start","loaded","success","fileExists","loading","uploadType","detectedFormat","manualFormat","metadataHandler","handleUploadStatus","state","files","length","isTabular","fileFormat","resourceMetadata","addSchema","descriptor","onClickHandler","trim","resourceName","split","pop","urlResource","onFormatChange","newFormat","onUploadProgress","progressEvent","onTimeRemaining","total","progressLoaded","kbps","Date","getTime","client","resource","fileError","constructor","pushBlob","then","response","catch","datasetId","toUpperCase","round","Component","ResourceEditor","handleChangeMetadata","resourceCopy","handleSubmitMetadata","createResource","action","datasetMetadata","result","window","location","href","config","organizationId","resourceId","ckanResource","frictionlessCkanMapper","resourceFrictionlessToCkan","sample","bqTableName","bq_table_name","uuidv4","isUrlResource","ckanResourceCopy","package_id","replace","url_type","sha256","lfs_prefix","onChangeResourceId","deleteResource","confirm","status","ui","newUiState","fileOrLink","uploadComplete","isResourceEdit","bind","authToken","api","lfs","Client","resourceSchema","resourceSample","sampleCopy","property","push","onSubmit","preventDefault","defaultProps","element","document","getElementById","getAttribute","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.0583dc85.chunk.js","sourcesContent":["var map = {\n\t\"./geojson.json\": 242,\n\t\"./table-schema.json\": 531,\n\t\"./topojson.json\": 243\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 530;","module.exports = __webpack_public_path__ + \"static/media/computing-cloud.7bf30162.svg\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./Metadata.css\";\r\nimport encodeData from \"../../db/encode.json\";\r\nimport formatData from \"../../db/resource_formats.json\";\r\n\r\n//TODO: add the custom fields as a props and render it in metadata component\r\nconst customFields = [\r\n  {\r\n    label: \"Access Restriction\",\r\n    name: \"restricted\",\r\n    input_type: \"select\",\r\n    values: ['{\"level\": \"public\"}', '{\"level\": \"private\"}'],\r\n    options: [\"Public\", \"Private\"],\r\n  },\r\n];\r\n\r\nconst Metadata = ({ metadata, handleChange}) => {\r\n  return (\r\n    <>\r\n      <h3 className=\"metadata-name\">{metadata.path}</h3>\r\n      <div className=\"metadata-form\">\r\n        <div className=\"metadata-input\">\r\n          <label className=\"metadata-label\" htmlFor=\"title\">\r\n            Title:\r\n          </label>\r\n          <input\r\n            className=\"metadata-input__input\"\r\n            type=\"text\"\r\n            name=\"title\"\r\n            id=\"title\"\r\n            value={metadata.title || metadata.name}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"metadata-input\">\r\n          <label className=\"metadata-label\" htmlFor=\"description\">\r\n            Description:\r\n          </label>\r\n          <input\r\n            className=\"metadata-input__input\"\r\n            type=\"text\"\r\n            name=\"description\"\r\n            id=\"description\"\r\n            value={metadata.description || \"\"}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"metadata-input\">\r\n          <label className=\"metadata-label\" htmlFor=\"encoding\">\r\n            Encoding:\r\n          </label>\r\n          <select\r\n            className=\"metadata-input__input\"\r\n            name=\"encoding\"\r\n            id=\"encoding\"\r\n            value={metadata.encoding || \"\"}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select...\r\n            </option>\r\n            {encodeData.map((item) => (\r\n              <option key={`format-${item.value}`} value={item.value}>\r\n                {item.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        <div className=\"metadata-input\">\r\n          <label className=\"metadata-label\" htmlFor=\"format\">\r\n            Format:\r\n          </label>\r\n          <select\r\n            className=\"metadata-input__input\"\r\n            name=\"format\"\r\n            id=\"format\"\r\n            value={(metadata.format || \"\").toLowerCase()}\r\n            onChange={handleChange}\r\n            required\r\n          >\r\n            <option value=\"\" disabled>\r\n              Select...\r\n            </option>\r\n            {formatData.map((item) => (\r\n              <option key={`format-${item[0]}`} value={item[0].toLowerCase()}>\r\n                {item[0]}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        {customFields &&\r\n          customFields.map((item) => (\r\n            <div key={`metadata-custom-${item.name}`} className=\"metadata-input\">\r\n              <label className=\"metadata-label\" htmlFor=\"format\">\r\n                {item.label}:\r\n              </label>\r\n              <select\r\n                className=\"metadata-input__input\"\r\n                name={item.name}\r\n                id={item.name}\r\n                value={metadata[item.name] || \"\"}\r\n                onChange={handleChange}\r\n                required\r\n              >\r\n                <option value=\"\" disabled>\r\n                  Select...\r\n                </option>\r\n                {item.options.map((option, index) => (\r\n                  <option\r\n                    key={`${item.name}-${index}`}\r\n                    value={item.values[index]}\r\n                  >\r\n                    {option}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nMetadata.propTypes = {\r\n  metadata: PropTypes.object.isRequired,\r\n  handleChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Metadata;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTable } from \"react-table\";\r\nimport types from \"../../db/types.json\";\r\n\r\nimport \"./TableSchema.css\";\r\n\r\nconst TableSchema = (props) => {\r\n  const [schema, setSchema] = useState(props.schema);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const data = React.useMemo(() => [...props.data], [schema]);\r\n\r\n  const columnsSchema = schema.fields.map((item, index) => {\r\n    return {\r\n      Header: item.name ? item.name : `column_${index + 1}`,\r\n      accessor: item.name ? item.name : `column_${index + 1}`,\r\n    };\r\n  });\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  const columns = React.useMemo(() => [...columnsSchema], [schema]);\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow,\r\n  } = useTable({ columns, data });\r\n\r\n  const handleChange = (event, key, index) => {\r\n    const newSchema = { ...schema };\r\n    newSchema.fields[index][key] = event.target.value;\r\n    setSchema(newSchema);\r\n  };\r\n\r\n  //if the the user upload a new file, will update the state\r\n  //and render with the new values\r\n  useEffect(() => {\r\n    setSchema(props.schema);\r\n  }, [props.schema]);\r\n\r\n  const renderEditSchemaField = (key) => {\r\n    if (key === \"type\") {\r\n      return schema.fields.map((item, index) => (\r\n        <td key={`schema-type-field-${key}-${index}`}>\r\n          <select\r\n            className=\"table-tbody-select\"\r\n            value={item[key] || \"\"}\r\n            onChange={(event) => handleChange(event, key, index)}\r\n          >\r\n            {types.type.map((item, index) => {\r\n              return (\r\n                <option\r\n                  key={`schema-type-field-option-${item}-${index}`}\r\n                  value={item}\r\n                >\r\n                  {item}\r\n                </option>\r\n              );\r\n            })}\r\n          </select>\r\n        </td>\r\n      ));\r\n    }\r\n    return schema.fields.map((item, index) => (\r\n      <td key={`schema-field-${key}-${index}`}>\r\n        <input\r\n          className=\"table-tbody-input\"\r\n          type=\"text\"\r\n          value={item[key]}\r\n          onChange={(event) => handleChange(event, key, index)}\r\n        />\r\n      </td>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"table-container\">\r\n        <table className=\"table-schema-help\">\r\n          <tbody>\r\n            <tr className=\"table-tbody-help-tr\">\r\n              <td  className=\"table-tbody-help-td-empty\"></td>\r\n            </tr>\r\n            <tr className=\"table-tbody-help-tr\">\r\n              <td  className=\"table-tbody-help-td\">Title</td>\r\n            </tr>\r\n            <tr className=\"table-tbody-help-tr\">\r\n              <td  className=\"table-tbody-help-td\">Description</td>\r\n            </tr>\r\n            <tr className=\"table-tbody-help-tr\">\r\n              <td  className=\"table-tbody-help-td\">Type</td>\r\n            </tr>\r\n            <tr className=\"table-tbody-help-tr\">\r\n              <td  className=\"table-tbody-help-td\">Format</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n        <div className=\"table-schema-info_container\">\r\n          <table  className=\"table-schema-info_table\" {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map((headerGroup) => (\r\n                <tr\r\n                  className=\"table-thead-tr\"\r\n                  {...headerGroup.getHeaderGroupProps()}\r\n                >\r\n                  {headerGroup.headers.map((column) => (\r\n                    <th className=\"table-thead-th\" {...column.getHeaderProps()}>\r\n                      {column.render(\"Header\")}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              <tr className=\"table-tbody-tr-help\">\r\n                {renderEditSchemaField(\"title\")}\r\n              </tr>\r\n              <tr className=\"table-tbody-tr-help\">\r\n                {renderEditSchemaField(\"description\")}\r\n              </tr>\r\n              <tr>{renderEditSchemaField(\"type\")}</tr>\r\n              <tr>{renderEditSchemaField(\"format\")}</tr>\r\n              {rows.map((row) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell) => {\r\n                      return (\r\n                        <td {...cell.getCellProps()} className=\"table-tbody-td\">\r\n                          {cell.render(\"Cell\")}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nTableSchema.propTypes = {\r\n  schema: PropTypes.object.isRequired,\r\n  data: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default TableSchema;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport \"./ProgressBar.css\";\r\n\r\nconst ProgressBar = (props) => {\r\n  const [offset, setOffset] = useState(0);\r\n  const circleRef = useRef(null);\r\n  const {\r\n    size,\r\n    progress,\r\n    strokeWidth,\r\n    circleOneStroke,\r\n    circleTwoStroke,\r\n    timeRemaining,\r\n  } = props;\r\n\r\n  const center = size / 2;\r\n  const radius = size / 2 - strokeWidth / 2;\r\n  const circumference = 2 * Math.PI * radius;\r\n\r\n  useEffect(() => {\r\n    const progressOffset = ((100 - progress) / 100) * circumference;\r\n    setOffset(progressOffset);\r\n\r\n    circleRef.current.style = \"transition: stroke-dashoffset 850ms ease-in-out\";\r\n  }, [setOffset, progress, circumference, offset]);\r\n\r\n  return (\r\n    <>\r\n      <svg className=\"svg\" width={size} height={size}>\r\n        <circle\r\n          className=\"svg-circle-bg\"\r\n          stroke={circleOneStroke}\r\n          cx={center}\r\n          cy={center}\r\n          r={radius}\r\n          strokeWidth={strokeWidth}\r\n        />\r\n        <circle\r\n          className=\"svg-circle\"\r\n          ref={circleRef}\r\n          stroke={circleTwoStroke}\r\n          cx={center}\r\n          cy={center}\r\n          r={radius}\r\n          strokeWidth={strokeWidth}\r\n          strokeDasharray={circumference}\r\n          strokeDashoffset={offset}\r\n        />\r\n        <text x={`${center}`} y={`${center + 2}`} className=\"svg-circle-text\">\r\n          {progress}%\r\n        </text>\r\n      </svg>\r\n      {timeRemaining > 0 &&  <span className=\"time-remaining\">{timeRemaining > 60 ? `${Math.floor(timeRemaining /60)} minute${Math.floor(timeRemaining /60) > 1 ? 's' : ''}` : `${Math.floor(timeRemaining)} second${timeRemaining > 1 ? 's' : ''}`} left</span>}\r\n    </>\r\n  );\r\n};\r\n\r\nProgressBar.propTypes = {\r\n  size: PropTypes.number.isRequired,\r\n  progress: PropTypes.number.isRequired,\r\n  strokeWidth: PropTypes.number.isRequired,\r\n  circleOneStroke: PropTypes.string.isRequired,\r\n  circleTwoStroke: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ProgressBar;\r\n","const getFileExtension = (filename) => {\r\n    return /[.]/.exec(filename) ? /[^.]+$/.exec(filename)[0] : undefined;\r\n  };\r\n\r\nconst  onFormatTitle = (name) => {\r\n    return name\r\n      .replace(/\\.[^/.]+$/, \"\")\r\n      .replace(/_/g, \" \")\r\n      .replace(/-/g, \" \");\r\n  };\r\n\r\nconst onFormatName = (name) => {\r\n    return name.replace(/\\.[^/.]+$/, \"\");\r\n  };\r\n\r\nconst onFormatBytes = (bytes, decimals = 1) => {\r\n    if (bytes === 0) return \"0 Bytes\";\r\n\r\n    const k = 1000;\r\n    const dm = decimals < 0 ? 0 : decimals;\r\n    const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"];\r\n\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + \" \" + sizes[i];\r\n  };\r\n\r\nconst removeHyphen = (id) => {\r\n   return id.replace(/-/g, \"\");\r\n  };\r\n\r\nconst detectUrlFormat = (url) => {\r\n    try {\r\n      const urlObj = new URL(url);\r\n      const pathname = urlObj.pathname;\r\n      \r\n      // Get file extension from URL path\r\n      const extension = getFileExtension(pathname);\r\n      \r\n      // Common file extensions that indicate specific file types\r\n      const fileExtensions = [\r\n        'csv', 'json', 'xml', 'pdf', 'xlsx', 'xls', 'doc', 'docx', \r\n        'txt', 'zip', 'rar', 'jpg', 'jpeg', 'png', 'gif', 'svg',\r\n        'mp4', 'mp3', 'avi', 'mov', 'wmv', 'flv', 'mkv', 'webm',\r\n        'wav', 'flac', 'aac', 'ogg', 'm4a', 'wma', 'ppt', 'pptx', \r\n        'geojson', 'kml', 'kmz', 'shp', 'tsv', 'rdf', 'owl', 'n3', 'ttl'\r\n      ];\r\n      \r\n      // If URL has a specific file extension, return it\r\n      if (extension && fileExtensions.includes(extension.toLowerCase())) {\r\n        return extension.toLowerCase();\r\n      }\r\n      \r\n      // If URL ends with / or has no extension, or common web paths, treat as website\r\n      if (pathname === '/' || \r\n          pathname === '' || \r\n          !extension ||\r\n          pathname.includes('/page/') ||\r\n          pathname.includes('/post/') ||\r\n          pathname.includes('/article/') ||\r\n          urlObj.search || // has query parameters\r\n          urlObj.hash) { // has fragment\r\n        return 'website';\r\n      }\r\n      \r\n      // If extension exists but not in our file list, also treat as website\r\n      return 'website';\r\n      \r\n    } catch (error) {\r\n      // If URL parsing fails, default to website\r\n      return 'website';\r\n    }\r\n  };\r\n\r\n// Function to check if a file type requires schema parsing (tabular data)\r\nconst isTabularDataFormat = (filename) => {\r\n  const extension = getFileExtension(filename);\r\n  if (!extension) return false;\r\n  \r\n  // File formats that contain tabular data and can be parsed by frictionless.js\r\n  const tabularFormats = [\r\n    'csv', 'tsv', 'json', 'xlsx', 'xls', 'ods', 'geojson'\r\n  ];\r\n  \r\n  return tabularFormats.includes(extension.toLowerCase());\r\n};\r\n\r\n// Function to get file format from filename\r\nconst getFileFormat = (filename) => {\r\n  const extension = getFileExtension(filename);\r\n  return extension ? extension.toLowerCase() : 'unknown';\r\n};\r\n\r\n// Function to generate SHA256 hash for files using Web Crypto API\r\nconst generateFileHash = async (file) => {\r\n  try {\r\n    const arrayBuffer = await file.arrayBuffer();\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', arrayBuffer);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');\r\n    return hashHex;\r\n  } catch (error) {\r\n    console.warn('Failed to generate file hash:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport {\r\n    getFileExtension,\r\n    onFormatTitle,\r\n    onFormatName,\r\n    onFormatBytes,\r\n    removeHyphen,\r\n    detectUrlFormat,\r\n    isTabularDataFormat,\r\n    getFileFormat,\r\n    generateFileHash,\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport './InputFile.css'\r\nimport UploadIcon from \"../../assets/images/computing-cloud.svg\";\r\n\r\nconst InputFile = ({ onChangeHandler }) => {\r\n\r\n      return (\r\n            <div className=\"upload-area__drop\">\r\n                <input\r\n                    className=\"upload-area__drop__input\"\r\n                    type=\"file\"\r\n                    name=\"file\"\r\n                    onChange={onChangeHandler}\r\n                />\r\n                <img\r\n                    className=\"upload-area__drop__icon\"\r\n                    src=\"https://www.shareicon.net/data/256x256/2015/09/05/96087_cloud_512x512.png\"\r\n                    alt=\"upload-icon\"\r\n                />\r\n                <span className=\"upload-area__drop__text\">\r\n                    Drag and drop your files\r\n                    <br />\r\n                    or <br />\r\n                    click to select\r\n                </span>\r\n            </div>\r\n      )\r\n  }\r\n\r\nInputFile.propTypes = {\r\n  onChangeHandler: PropTypes.func.isRequired\r\n};\r\n\r\nexport default InputFile;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./InputUrl.css\";\r\n\r\nconst InputUrl = ({ onChangeUrl }) => {\r\n  const handleKeyPress = (event) => {\r\n    if (event.keyCode === 13) {\r\n      event.target.blur();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-area__url\">\r\n      <label className=\"upload-area__url__label\" htmlFor=\"input-url\">\r\n        URL:\r\n      </label>\r\n      <input\r\n        className=\"upload-area__url__input\"\r\n        id=\"input-url\"\r\n        type=\"url\"\r\n        name=\"input-url\"\r\n        onBlur={onChangeUrl}\r\n        onKeyDown={(event) => handleKeyPress(event)}\r\n        placeholder=\"https://www.data.com/sample.csv\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nInputUrl.propTypes = {\r\n  onChangeUrl: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default InputUrl;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputFile from \"../InputFile\";\r\nimport InputUrl from \"../InputUrl\";\r\nimport './Choose.css'\r\n\r\nconst Choose = ({ onChangeUrl, onChangeHandler, resetUploadState }) => {\r\n  const [uploadOption, setUploadOption] = useState(false);\r\n\r\n  const handleBack = () => {\r\n    setUploadOption(false);\r\n    // Reset the upload state when going back\r\n    if (resetUploadState) {\r\n      resetUploadState();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-choose\">\r\n      {uploadOption ? (\r\n        <>\r\n          <div className=\"upload-option-header\">\r\n            <button \r\n              className=\"back-btn\" \r\n              onClick={handleBack}\r\n              type=\"button\"\r\n            >\r\n              ← Volver\r\n            </button>\r\n            <span className=\"upload-option-title\">\r\n              {uploadOption === \"file\" ? \"Subir archivo\" : \"Enlazar archivo online\"}\r\n            </span>\r\n          </div>\r\n          {uploadOption === \"file\" && (\r\n            <InputFile onChangeHandler={onChangeHandler} />\r\n          )}\r\n          {uploadOption === \"url\" && <InputUrl onChangeUrl={onChangeUrl} />}\r\n        </>\r\n      ) : (\r\n        <div>\r\n          <button className=\"choose-btn\" onClick={() => setUploadOption(\"file\")}>Choose a file to Upload </button>\r\n          <p className=\"choose-text\">OR</p>\r\n          <button className=\"choose-btn\" onClick={() => setUploadOption(\"url\")}>Link a file already online</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nChoose.propTypes = {\r\n  onChangeUrl: PropTypes.func.isRequired,\r\n  onChangeHandler: PropTypes.func.isRequired,\r\n  resetUploadState: PropTypes.func,\r\n};\r\n\r\nexport default Choose;\r\n","import React from \"react\";\r\nimport * as data from \"frictionless.js\";\r\nimport toArray from \"stream-to-array\";\r\nimport ProgressBar from \"../ProgressBar\";\r\nimport { onFormatBytes, detectUrlFormat, isTabularDataFormat, getFileFormat, generateFileHash } from \"../../utils\";\r\nimport Choose from \"../Choose\";\r\nimport formatData from \"../../db/resource_formats.json\";\r\nimport \"./Upload.css\";\r\n\r\n// Create a custom File class that extends the original File functionality\r\nclass FileWithHash extends File {\r\n  constructor(originalFile) {\r\n    // Create a new File with the same data\r\n    super([originalFile], originalFile.name, {\r\n      type: originalFile.type,\r\n      lastModified: originalFile.lastModified\r\n    });\r\n    \r\n    // Store reference to original file for hash generation\r\n    this._originalFile = originalFile;\r\n  }\r\n\r\n  // Override hash method\r\n  async hash(algorithm) {\r\n    return await generateFileHash(this._originalFile);\r\n  }\r\n}\r\n\r\nclass Upload extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      datasetId: props.datasetId,\r\n      selectedFile: null,\r\n      selectedUrl: \"\",\r\n      fileSize: 0,\r\n      formattedSize: \"0 KB\",\r\n      start: \"\",\r\n      loaded: 0,\r\n      success: false,\r\n      error: false,\r\n      fileExists: false,\r\n      loading: false,\r\n      timeRemaining: 0,\r\n      uploadType: \"\", // \"file\" or \"url\"\r\n      detectedFormat: \"\", // automatically detected format\r\n      manualFormat: \"\", // manually selected format\r\n    };\r\n  }\r\n\r\n  resetUploadState = () => {\r\n    this.setState({\r\n      selectedFile: null,\r\n      selectedUrl: \"\",\r\n      fileSize: 0,\r\n      formattedSize: \"0 KB\",\r\n      start: \"\",\r\n      loaded: 0,\r\n      success: false,\r\n      error: false,\r\n      fileExists: false,\r\n      loading: false,\r\n      timeRemaining: 0,\r\n      uploadType: \"\",\r\n      detectedFormat: \"\",\r\n      manualFormat: \"\",\r\n    });\r\n\r\n    // Also reset the resource metadata in the parent component\r\n    this.props.metadataHandler({});\r\n    \r\n    // Reset upload status\r\n    this.props.handleUploadStatus({\r\n      loading: false,\r\n      success: false,\r\n      error: false,\r\n    });\r\n  };\r\n\r\n  onChangeHandler = async (event) => {\r\n    let { formattedSize, selectedFile } = this.state;\r\n\r\n    if (event.target.files.length > 0) {\r\n      selectedFile = event.target.files[0];\r\n      \r\n      // Check if this is a tabular data format that can be parsed by frictionless.js\r\n      const isTabular = isTabularDataFormat(selectedFile.name);\r\n      const fileFormat = getFileFormat(selectedFile.name);\r\n      \r\n      let resourceMetadata = {\r\n        name: selectedFile.name,\r\n        title: selectedFile.name,\r\n        format: fileFormat,\r\n        size: selectedFile.size\r\n      };\r\n\r\n      if (isTabular) {\r\n        // For tabular data, use frictionless.js to parse schema\r\n        try {\r\n          const file = data.open(selectedFile);\r\n          try {\r\n            await file.addSchema();\r\n            resourceMetadata = {\r\n              ...file.descriptor,\r\n              format: fileFormat\r\n            };\r\n          } catch (e) {\r\n            console.warn(\"Schema parsing failed, continuing without schema:\", e);\r\n            // Continue without schema if parsing fails\r\n            resourceMetadata = {\r\n              ...resourceMetadata,\r\n              schema: { fields: [] }\r\n            };\r\n          }\r\n          formattedSize = onFormatBytes(file.size);\r\n          const hash = await file.hash('sha256');\r\n          resourceMetadata.hash = hash;\r\n        } catch (e) {\r\n          console.warn(\"Frictionless.js processing failed, using basic metadata:\", e);\r\n          formattedSize = onFormatBytes(selectedFile.size);\r\n          // For non-tabular files or when frictionless fails, create basic metadata\r\n          resourceMetadata = {\r\n            ...resourceMetadata,\r\n            schema: { fields: [] }\r\n          };\r\n          // Try to generate hash for failed tabular files\r\n          const hash = await generateFileHash(selectedFile);\r\n          if (hash) {\r\n            resourceMetadata.hash = hash;\r\n          }\r\n        }\r\n      } else {\r\n        // For non-tabular files (PDF, images, documents, etc.), create basic metadata\r\n        formattedSize = onFormatBytes(selectedFile.size);\r\n        resourceMetadata = {\r\n          ...resourceMetadata,\r\n          schema: { fields: [] }\r\n        };\r\n        // Generate hash for non-tabular files\r\n        const hash = await generateFileHash(selectedFile);\r\n        if (hash) {\r\n          resourceMetadata.hash = hash;\r\n        }\r\n      }\r\n\r\n      this.props.metadataHandler(resourceMetadata);\r\n    }\r\n\r\n    this.setState({\r\n      selectedFile,\r\n      selectedUrl: \"\",\r\n      loaded: 0,\r\n      success: false,\r\n      fileExists: false,\r\n      error: false,\r\n      formattedSize,\r\n      uploadType: \"file\",\r\n    });\r\n\r\n    await this.onClickHandler();\r\n  };\r\n\r\n  onChangeUrl = async (event) => {\r\n    const url = event.target.value.trim();\r\n    \r\n    if (!url) {\r\n      this.setState({\r\n        selectedUrl: \"\",\r\n        success: false,\r\n        error: false,\r\n        uploadType: \"\",\r\n        detectedFormat: \"\",\r\n        manualFormat: \"\",\r\n      });\r\n      this.props.handleUploadStatus({\r\n        loading: false,\r\n        success: false,\r\n        error: false,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Basic URL validation\r\n    try {\r\n      new URL(url);\r\n    } catch (error) {\r\n      console.error(\"Invalid URL:\", error);\r\n      this.setState({\r\n        selectedUrl: url,\r\n        selectedFile: null,\r\n        loading: false,\r\n        success: false,\r\n        error: true,\r\n        uploadType: \"url\",\r\n        detectedFormat: \"\",\r\n        manualFormat: \"\",\r\n      });\r\n\r\n      this.props.handleUploadStatus({\r\n        loading: false,\r\n        success: false,\r\n        error: true,\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Detect format automatically based on URL\r\n    const detectedFormat = detectUrlFormat(url);\r\n    \r\n    this.setState({\r\n      selectedUrl: url,\r\n      selectedFile: null,\r\n      loading: false,\r\n      success: true,\r\n      error: false,\r\n      uploadType: \"url\",\r\n      formattedSize: \"URL Resource\",\r\n      fileSize: 0,\r\n      detectedFormat: detectedFormat,\r\n      manualFormat: detectedFormat, // Initialize manual format with detected format\r\n    });\r\n\r\n    this.props.handleUploadStatus({\r\n      loading: false,\r\n      success: true,\r\n      error: false,\r\n    });\r\n\r\n    const resourceName = url.split('/').pop() || 'resource-from-url';\r\n    \r\n    const urlResource = {\r\n      url: url,\r\n      name: resourceName,\r\n      title: resourceName,\r\n      format: detectedFormat,\r\n      // No hash, size, or schema for URL resources\r\n      // These will be handled differently in the backend\r\n    };\r\n\r\n    this.props.metadataHandler(urlResource);\r\n  };\r\n\r\n  onFormatChange = (event) => {\r\n    const newFormat = event.target.value;\r\n    this.setState({\r\n      manualFormat: newFormat,\r\n    });\r\n\r\n    // Update the resource metadata with the new format\r\n    const { selectedUrl } = this.state;\r\n    const resourceName = selectedUrl.split('/').pop() || 'resource-from-url';\r\n    \r\n    const urlResource = {\r\n      url: selectedUrl,\r\n      name: resourceName,\r\n      title: resourceName,\r\n      format: newFormat,\r\n    };\r\n\r\n    this.props.metadataHandler(urlResource);\r\n  };\r\n\r\n  onUploadProgress = (progressEvent) => {\r\n    this.onTimeRemaining(progressEvent.loaded);\r\n    this.setState({\r\n      loaded: (progressEvent.loaded / progressEvent.total) * 100,\r\n    });\r\n  };\r\n\r\n  onTimeRemaining = (progressLoaded) => {\r\n    const end = new Date().getTime();\r\n    const duration = (end - this.state.start) / 1000;\r\n    const bps = progressLoaded / duration;\r\n    const kbps = bps / 1024;\r\n    const timeRemaining = (this.state.fileSize - progressLoaded) / kbps;\r\n\r\n    this.setState({\r\n      timeRemaining: timeRemaining / 1000,\r\n    });\r\n  };\r\n\r\n  onClickHandler = async () => {\r\n    const start = new Date().getTime();\r\n    const { selectedFile } = this.state;\r\n    const { client } = this.props;\r\n\r\n    if (!selectedFile) {\r\n      console.error(\"No file selected\");\r\n      return;\r\n    }\r\n\r\n    console.log(\"Selected file:\", selectedFile);\r\n    console.log(\"File type:\", selectedFile.type);\r\n    console.log(\"File name:\", selectedFile.name);\r\n    console.log(\"File size:\", selectedFile.size);\r\n\r\n    // Check if this is a tabular data format\r\n    const isTabular = isTabularDataFormat(selectedFile.name);\r\n    \r\n    let resource;\r\n    let fileSize = selectedFile.size;\r\n\r\n    if (isTabular) {\r\n      // For tabular data, use frictionless.js\r\n      try {\r\n        resource = data.open(selectedFile);\r\n        fileSize = resource.size;\r\n        console.log(\"Using frictionless.js resource:\", resource);\r\n      } catch (e) {\r\n        console.warn(\"Frictionless.js failed, creating FileWithHash:\", e);\r\n        // Create a FileWithHash for failed tabular files\r\n        try {\r\n          resource = new FileWithHash(selectedFile);\r\n          console.log(\"Created FileWithHash for failed tabular file:\", resource);\r\n        } catch (fileError) {\r\n          console.error(\"Failed to create FileWithHash, using fallback:\", fileError);\r\n          // Final fallback - return the original file and hope for the best\r\n          resource = selectedFile;\r\n        }\r\n      }\r\n    } else {\r\n      // For non-tabular files (PDF, images, documents, etc.), create a FileWithHash\r\n      try {\r\n        resource = new FileWithHash(selectedFile);\r\n        console.log(\"Created FileWithHash for non-tabular file:\", resource);\r\n      } catch (fileError) {\r\n        console.error(\"Failed to create FileWithHash, using fallback:\", fileError);\r\n        // Fallback - return the original file\r\n        resource = selectedFile;\r\n      }\r\n    }\r\n\r\n    console.log(\"Final resource object:\", resource);\r\n    console.log(\"Resource type:\", resource.type);\r\n    console.log(\"Resource size:\", resource.size);\r\n    console.log(\"Resource constructor:\", resource.constructor.name);\r\n\r\n    this.setState({\r\n      fileSize: fileSize,\r\n      start,\r\n      loading: true,\r\n    });\r\n\r\n    this.props.handleUploadStatus({\r\n      loading: true,\r\n      error: false,\r\n      success: false,\r\n    });\r\n\r\n    // Use client to upload file to the storage and track the progress\r\n    client\r\n      .pushBlob(resource, this.onUploadProgress)\r\n      .then((response) => {\r\n        console.log(\"Upload successful:\", response);\r\n        this.setState({\r\n          success: true,\r\n          loading: false,\r\n          fileExists: ! response,\r\n          loaded: 100\r\n        });\r\n        this.props.handleUploadStatus({\r\n          loading: false,\r\n          success: true,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Upload failed with error: \" + error);\r\n        console.error(\"Error details:\", error);\r\n        this.setState({ error: true, loading: false });\r\n        this.props.handleUploadStatus({\r\n          loading: false,\r\n          success: false,\r\n          error: true,\r\n        });\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      success,\r\n      fileExists,\r\n      error,\r\n      timeRemaining,\r\n      selectedFile,\r\n      selectedUrl,\r\n      formattedSize,\r\n      uploadType,\r\n      loading,\r\n      detectedFormat,\r\n      manualFormat,\r\n    } = this.state;\r\n\r\n    return (\r\n      <div className=\"upload-area\">\r\n        <Choose\r\n          onChangeHandler={this.onChangeHandler}\r\n          onChangeUrl={this.onChangeUrl}\r\n          resetUploadState={this.resetUploadState}\r\n        />\r\n        <div className=\"upload-area__info\">\r\n          {(selectedFile || selectedUrl) && (\r\n            <>\r\n              <ul className=\"upload-list\">\r\n                <li className=\"list-item\">\r\n                  <div className=\"upload-list-item\">\r\n                    <div>\r\n                      <p className=\"upload-file-name\">\r\n                        {uploadType === \"file\" ? selectedFile.name : selectedUrl}\r\n                      </p>\r\n                      <p className=\"upload-file-size\">{formattedSize}</p>\r\n                      {uploadType === \"url\" && (\r\n                        <div className=\"format-selector\">\r\n                          <label htmlFor=\"format-select\" className=\"format-label\">\r\n                            Resource Type:\r\n                          </label>\r\n                          <select\r\n                            id=\"format-select\"\r\n                            className=\"format-select\"\r\n                            value={manualFormat}\r\n                            onChange={this.onFormatChange}\r\n                          >\r\n                            {formatData.map((item) => (\r\n                              <option key={`format-${item[0]}`} value={item[0].toLowerCase()}>\r\n                                {item[0]} - {item[1]}\r\n                              </option>\r\n                            ))}\r\n                          </select>\r\n                          {detectedFormat && (\r\n                            <p className=\"detected-format\">\r\n                              Auto-detected: {detectedFormat.toUpperCase()}\r\n                            </p>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div>\r\n                      {uploadType === \"file\" && (\r\n                        <ProgressBar\r\n                          progress={Math.round(this.state.loaded)}\r\n                          size={50}\r\n                          strokeWidth={5}\r\n                          circleOneStroke=\"#d9edfe\"\r\n                          circleTwoStroke={\"#7ea9e1\"}\r\n                          timeRemaining={timeRemaining}\r\n                        />\r\n                      )}\r\n                      {uploadType === \"url\" && loading && (\r\n                        <div className=\"url-loading\">Processing URL...</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              </ul>\r\n              <h2 className=\"upload-message\">\r\n                {success && !fileExists && !error && \r\n                  (uploadType === \"file\" ? \"File uploaded successfully\" : \"URL processed successfully\")}\r\n                {fileExists && \"File uploaded successfully\"}\r\n                {error && (uploadType === \"file\" ? \"Upload failed\" : \"URL processing failed\")}\r\n              </h2>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Upload;\r\n","import React from \"react\";\r\nimport { Client } from \"ckan-client\";\r\nimport PropTypes from \"prop-types\";\r\nimport frictionlessCkanMapper from \"frictionless-ckan-mapper-js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport Metadata from \"./components/Metadata\";\r\nimport TableSchema from \"./components/TableSchema\";\r\nimport Upload from \"./components/Upload\";\r\nimport \"./App.css\";\r\nimport { removeHyphen } from \"./utils\";\r\n\r\nexport class ResourceEditor extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      datasetId: this.props.config.datasetId,\r\n      resourceId: \"\",\r\n      resource: this.props.resource || {},\r\n      ui: {\r\n        fileOrLink: \"\",\r\n        uploadComplete: undefined,\r\n        success: false,\r\n        error: false,\r\n        loading: false,\r\n      },\r\n      client: null,\r\n      isResourceEdit: false,\r\n    };\r\n    this.metadataHandler = this.metadataHandler.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const { config } = this.props;\r\n    const {\r\n      authToken,\r\n      api,\r\n      lfs,\r\n      organizationId,\r\n      datasetId,\r\n      resourceId,\r\n    } = config;\r\n\r\n    const client = new Client(\r\n      `${authToken}`,\r\n      `${organizationId}`,\r\n      `${datasetId}`,\r\n      `${api}`,\r\n      `${lfs}`\r\n    );\r\n\r\n    //Check if the user is editing resource\r\n    if (resourceId) {\r\n      const resource = await client.action(\"resource_show\", { id: resourceId });\r\n      const resourceSchema = await client.action(\"resource_schema_show\", {\r\n        id: resourceId,\r\n      });\r\n      const resourceSample = await client.action(\"resource_sample_show\", {\r\n        id: resourceId,\r\n      });\r\n\r\n      let resourceCopy = resource.result;\r\n      let sampleCopy = [];\r\n\r\n      try {\r\n        // push the values to an array\r\n        for (const property in resourceSample.result) {\r\n          sampleCopy.push(resourceSample.result[property]);\r\n        }\r\n        // push sample as an array to be able to render in tableschema component\r\n        resourceCopy.sample = sampleCopy;\r\n        resourceCopy.schema = resourceSchema.result;\r\n      } catch (e) {\r\n        console.error(e);\r\n        //generate empty values not to break the tableschema component\r\n        resourceCopy.schema = { fields: [] };\r\n        resourceCopy.sample = [];\r\n      }\r\n\r\n      return this.setState({\r\n        client,\r\n        resourceId,\r\n        resource: resourceCopy,\r\n        isResourceEdit: true,\r\n      });\r\n    }\r\n\r\n    this.setState({ client });\r\n  }\r\n\r\n  metadataHandler(resource) {\r\n    this.setState({\r\n      resource,\r\n    });\r\n  }\r\n\r\n  handleChangeMetadata = (event) => {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let resourceCopy = this.state.resource;\r\n    resourceCopy[name] = value;\r\n\r\n    this.setState({\r\n      resource: resourceCopy,\r\n    });\r\n  };\r\n\r\n  handleSubmitMetadata = async () => {\r\n    const { resource, client } = this.state;\r\n\r\n    await this.createResource(resource);\r\n\r\n    // Change state of dataset to active if draft atm\r\n    // this relates to how CKAN v2 has a phased dataset creation. See e.g.\r\n    // https://github.com/ckan/ckan/blob/master/ckan/controllers/package.py#L917\r\n\r\n    // only need to do this test if in resource create mode if editing a\r\n    // resource this is unnecessary\r\n    // TODO: update this in future to check for edit mode\r\n    const isResourceCreate = true;\r\n    if (isResourceCreate) {\r\n      const datasetMetadata = await client.action(\"package_show\", {\r\n        id: this.state.datasetId,\r\n      });\r\n      let result = datasetMetadata.result;\r\n\r\n      if (result.state == \"draft\") {\r\n        result.state = \"active\";\r\n        await client.action(\"package_update\", result);\r\n      }\r\n    }\r\n\r\n    // Redirect to dataset page\r\n    return (window.location.href = `/dataset/${this.state.datasetId}`);\r\n  };\r\n\r\n  createResource = async (resource) => {\r\n    const { client } = this.state;\r\n    const { config } = this.props;\r\n    const { organizationId, datasetId, resourceId } = config;\r\n\r\n    const ckanResource = frictionlessCkanMapper.resourceFrictionlessToCkan(\r\n      resource\r\n    );\r\n\r\n    //create a valid format from sample (only for file uploads)\r\n    let data = {};\r\n    if (ckanResource.sample) {\r\n      data = { ...ckanResource.sample };\r\n      //delete sample because is an invalid format\r\n      delete ckanResource.sample;\r\n    }\r\n    \r\n    //generate an unique id for bq_table_name property\r\n    let bqTableName = ckanResource.bq_table_name\r\n      ? ckanResource.bq_table_name\r\n      : uuidv4();\r\n\r\n    // Handle URL vs file upload differently\r\n    const isUrlResource = resource.url && !resource.hash; // URL resources might not have hash from upload\r\n    \r\n    let ckanResourceCopy = {\r\n      ...ckanResource,\r\n      package_id: this.state.datasetId,\r\n      name: resource.name || resource.title,\r\n      bq_table_name: removeHyphen(bqTableName),\r\n    };\r\n\r\n    // Only add sample for file uploads\r\n    if (!isUrlResource) {\r\n      ckanResourceCopy.sample = data;\r\n    }\r\n\r\n    if (isUrlResource) {\r\n      // For URL resources\r\n      ckanResourceCopy = {\r\n        ...ckanResourceCopy,\r\n        url: resource.url,\r\n        url_type: \"url\",\r\n      };\r\n    } else {\r\n      // For file uploads\r\n      ckanResourceCopy = {\r\n        ...ckanResourceCopy,\r\n        sha256: resource.hash,\r\n        size: resource.size,\r\n        lfs_prefix: `${organizationId}/${datasetId}`,\r\n        url: resource.name,\r\n        url_type: \"upload\",\r\n      };\r\n    }\r\n\r\n    //Check if the user is editing resource, call resource_update and redirect to the dataset page\r\n    if (resourceId) {\r\n      ckanResourceCopy = {\r\n        ...ckanResourceCopy,\r\n        id: resourceId,\r\n      };\r\n      await client.action(\"resource_update\", ckanResourceCopy);\r\n\r\n      return (window.location.href = `/dataset/${datasetId}`);\r\n    }\r\n    \r\n    await client\r\n      .action(\"resource_create\", ckanResourceCopy)\r\n      .then((response) => {\r\n        this.onChangeResourceId(response.result.id);\r\n      });\r\n  };\r\n\r\n  deleteResource = async () => {\r\n    const { resource, client, datasetId } = this.state;\r\n    if (window.confirm(\"Are you sure to delete this resource?\")) {\r\n      await client.action(\"resource_delete\", { id: resource.id });\r\n\r\n      return (window.location.href = `/dataset/${datasetId}`);\r\n    }\r\n  };\r\n\r\n  handleUploadStatus = (status) => {\r\n    const { ui } = this.state;\r\n    const newUiState = {\r\n      ...ui,\r\n      success: status.success,\r\n      error: status.error,\r\n      loading: status.loading,\r\n    };\r\n\r\n    this.setState({ ui: newUiState });\r\n  };\r\n\r\n  onChangeResourceId = (resourceId) => {\r\n    this.setState({ resourceId });\r\n  };\r\n\r\n  render() {\r\n    const { loading, success } = this.state.ui;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <form\r\n          className=\"upload-wrapper\"\r\n          onSubmit={(event) => {\r\n            event.preventDefault();\r\n            if (this.state.isResourceEdit) {\r\n              return this.createResource(this.state.resource);\r\n            }\r\n            return this.handleSubmitMetadata();\r\n          }}\r\n        >\r\n          <div className=\"upload-header\">\r\n            <h2 className=\"upload-header__title\">Resource Editor</h2>\r\n          </div>\r\n\r\n          <Upload\r\n            client={this.state.client}\r\n            resource={this.state.resource}\r\n            metadataHandler={this.metadataHandler}\r\n            datasetId={this.state.datasetId}\r\n            handleUploadStatus={this.handleUploadStatus}\r\n            onChangeResourceId={this.onChangeResourceId}\r\n          />\r\n\r\n          <div className=\"upload-edit-area\">\r\n            <Metadata\r\n              metadata={this.state.resource}\r\n              handleChange={this.handleChangeMetadata}\r\n            />\r\n            {this.state.resource.schema && (\r\n              <TableSchema\r\n                schema={this.state.resource.schema}\r\n                data={this.state.resource.sample || []}\r\n              />\r\n            )}\r\n            {!this.state.isResourceEdit ? (\r\n              <button disabled={!success} className=\"btn\">\r\n                Save and Publish\r\n              </button>\r\n            ) : (\r\n              <div className=\"resource-edit-actions\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-delete\"\r\n                  onClick={this.deleteResource}\r\n                >\r\n                  Delete\r\n                </button>\r\n                <button className=\"btn\">Update</button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * If the parent component doesn't specify a `config` and scope prop, then\r\n * the default values will be used.\r\n * */\r\nResourceEditor.defaultProps = {\r\n  config: {\r\n    authToken: \"be270cae-1c77-4853-b8c1-30b6cf5e9878\",\r\n    api: \"http://localhost:5000\",\r\n    lfs: \"http://localhost:5001\", // Feel free to modify this\r\n    organizationId: \"myorg\",\r\n    datasetId: \"data-test-2\",\r\n  },\r\n};\r\n\r\nResourceEditor.propTypes = {\r\n  config: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default ResourceEditor;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n// Mount the ResourceEditor app explicitly\r\n// (make sure you call the function after it's loaded)\r\nfunction mountResourceEditorApp([elementId, config, resource] = ['root', {\r\n  authToken: null,\r\n  api: null,\r\n  lfs: null,\r\n  organizationId: null,\r\n  datasetId: null,\r\n  resourceId: null,\r\n}, {}]) {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <App config={config} resource={resource} />\r\n    </React.StrictMode>,\r\n    document.getElementById(elementId)\r\n  );\r\n};\r\n\r\n\r\n// Automatically mount the app if an element with id='ResourceEditor' exists\r\nconst element = document.getElementById('ResourceEditor');\r\nif (element) {\r\n  const config = {\r\n    datasetId: element.getAttribute('data-dataset-id'),\r\n    api: element.getAttribute('data-api'),\r\n    lfs: element.getAttribute('data-lfs'),\r\n    authToken: element.getAttribute('data-auth-token'),\r\n    organizationId: element.getAttribute('data-organization-id'),\r\n    resourceId: element.getAttribute('data-resource-id')\r\n  }\r\n\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n        <App\r\n          config={config}\r\n          resource={ element.getAttribute('data-resource')}\r\n        />\r\n    </React.StrictMode>,\r\n    element\r\n  );\r\n}\r\n\r\n\r\nexport { ResourceEditor } from './App';\r\n"],"sourceRoot":""}